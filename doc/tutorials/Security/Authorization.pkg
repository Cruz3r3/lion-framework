<refentry id="{@id}">
 <refnamediv>
  <refname>Authorization in Lion</refname>
  <refpurpose>A Role Based Access Control</refpurpose>
 </refnamediv>
 <refsynopsisdiv>
 </refsynopsisdiv>
{@toc}
 <para></para>
 <refsect1 id="{@id authorization_definition}">
  <title>What's Authorization?</title>
  <para>Authorization is finding out if the person, once identified, is permitted to access to a system resource (to view a page, to call a model service, ...).<br/>
  This is usually determined by finding out if that person is a part of a particular group, if that person has paid admission, or has a particular level of security clearance. Authorization is equivalent to checking the guest list at an exclusive party, or checking for your ticket when you go to the opera.</para>
  <para>As well as other software pieces, there are several patterns to implement the authorization.<br/>
  One of the most commonly used is the known as <emphasis>Role Based Access Control</emphasis> (<emphasis>RBAC</emphasis>).</para>
 </refsect1>
 <refsect1 id="{@id rbac_definition}">
  <title>What's a Role Based Access Control?</title>
  <para>Role Based Access Control (or just RBAC) is a method to control access to resources on an information system. It's a model for controlling access to resources where permitted actions on resources are identified with roles rather than with individual subject identities.</para>
  <para>It was developed in Lion to overcome the complexities of managing individual user permissions and their assignments. The RBAC effort is motivated by concurrent efforts to:</para>
  <para>
    <itemizedlist>
      <listitem>Simplify authorization management</listitem>
      <listitem>Reduce administrative costs</listitem>
      <listitem>Improve security</listitem>
      <listitem>Provide low-level authorization granularity</listitem>
    </itemizedlist>
  </para>
  <para>The operational benefits of RBAC have long been recognized since it simplifies the complexity of managing user permissions, thus providing reduced administrative cost and time.</para>
  <para>RBAC allow us to define roles to users as well as permissions to system resources:</para>
  <para>
  <itemizedlist>
    <listitem><emphasis>User</emphasis>: An user represents the client (commonly the end-user) of your web application. In Lion, the user is an instance of a class implementing the {@link __IUser}, but usually a class extending the {@link __User}.</listitem>
    <listitem><emphasis>Role</emphasis>: A role is a collection of permissions. As such, a role serves no purpose unless permissions are assigned to it. An example role might be a 'Message Board Topic Administrator.' The role might be assigned permissions to View, Update, and Delete Message Board Topic resources that have company scope. Ultimately, a user assigned the 'Message Board Topic Administrator' role would be able to view, update, and delete any topic for any message board in the company. Roles are assigned to users. Roles can also be compounded by other roles (junior roles), inheriting all their permissions.</listitem>
    <listitem><emphasis>Permission</emphasis>: The ability or right to perform some action on some resource, possibly only under certain specified conditions.</listitem>
    <listitem><emphasis>System Resource</emphasis>: A system resource is a generic term for any object represented in the web application. In Lion, a system resource is a class implementing the {@link __ISystemResource} (usually a class extending the {@link __SystemResource}).</listitem>
  </itemizedlist>
  </para>
 </refsect1>
 <refsect1 id="{@id roles}">
  <title>Roles</title>
  <para>Roles are associated to users. Basically, a role is a very flexible way to assign permissions to users.</para>
  <note><para>The file <emphasis>app/config/security.xml</emphasis> is reserved to define roles and permissions. In fact, this file contains an empty <emphasis>role-definitions</emphasis> and <emphasis>permission-definitions</emphasis> sections.</para>
  <para>However, Lion is enough flexible to allow to define those sections wherever.</para></note>
  <para>Roles can also be grouped in hierarchies to make easy the permission assignment:</para>
  <itemizedlist>
    <listitem>A <emphasis>junior role</emphasis> is when, in a role hierarchy, Role A is junior to Role B if Role B inherits all the permissions associated with Role A.</listitem>
    <listitem>A <emphasis>senior role</emphasis> is when, in a role hierarchy, Role A is senior to Role B if Role A inherits all the permissions associated with Role B.</listitem>
  </itemizedlist>
  <para>All roles can be defined declaratively inside the <emphasis>role-definitions</emphasis> configuration section.</para>
  <para>i.e. imagine a configuration for a Forum Application: users can read and write messages while administrator can delete and modify messages. Of course, administrator can also read and write messages.
  {@example Security/Authorization/roles1.xml}
  </para>
  <para>In this example, the FORUM_USER role is junior role to FORUM_ADMIN.<br/>
  Users with the FORUM_USER role will have the READ_POSTS and WRITE_POSTS permissions. It is, they will be able to read and write post in the forum.<br/>
  At the same time, users with the FORUM_ADMIN role will have DELETE_POSTS and MODIFY_POSTS permissions as well as READ_POSTS and WRITE_POSTS (inherited from FORUM_USER junior role). It is, they will be able to delete and modify post in the forum as well as read and write posts.
  </para>
  <para>Junior roles capability is very usefull: By adding a new permission to a junior role, all the senior roles will inherit that permission, becoming the permissions management more maintenable.</para>
 </refsect1>
 <refsect1 id="{@id permissions}">
  <title>Permissions</title>
  <para>Permissions are associated to roles (as we have seen in the previous section) and to system resources (defining the required permission to grant the access to a system resource).</para>
  <para>In Lion, also in general, a system resource can have just one permission associated.<br/>
  Instead of allowing the assignment of multiple permissions to system resources, we can define permissions hierarchies:</para>
  <itemizedlist>
    <listitem>A <emphasis>junior permission</emphasis> is when, in a permission hierarchy, Permission A is junior to Permission B if all the system resources requiring the Permission A are accessible by having the permission B.</listitem>
    <listitem>A <emphasis>senior permission</emphasis> is when, in a permission hierarchy, Permission A is senior to Permission B if all the system resources requiring the Permission B are accessible by having the permission A.</listitem>
  </itemizedlist>
  <para>All permissions can be defined declaratively inside the <emphasis>permission-definitions</emphasis> configuration section.</para>
  <para>i.e. continuing with our Forum, let's define permissions:
  {@example Security/Authorization/permissions1.xml}
  </para>
  <para>In this example, DELETE_POSTS and MODIFY_POSTS permissions are junior permissions to ADMIN_POSTS.<br/>
  i.e., roles with the ADMIN_POSTS permission will be able to access to system resources that require the DELETE_POSTS or MODIFY_POSTS permissions, because ADMIN_POSTS is senior permission to DELETE_POSTS and MODIFY_POSTS.
 </para>  
 <refsect2 id="{@id permission_all}">
  <title>The PERMISSION_ALL permission</title>
  <para>There is an special permission in Lion: <emphasis>PERMISSION_ALL</emphasis>.<br/>
  This permission is a senior permission to every permission within your project. A role with this permission is able to access to all system resources. So, take care assigning this permission :)</para>
  <para>Ah! do not define a permission with this name, is reserved for this special permission.</para>
 </refsect2>
 </refsect1>
 <refsect1 id="{@id systemresources}">
  <title>System Resources</title>
  <para>As defined previously, A system resource is a generic term for any object represented in the web application.<br/>
  In terms of authorization, let's focus on a system resource as an object protected by the RBAC.<br/> 
  In Lion, a system resource is just a class implementing the {@link __ISystemResource}, but usually a class extending the {@link __SystemResource}.</para>
  <para>The following classes extends the {@link __SystemResource}:
    <itemizedlist>
      <listitem><emphasis>Action Controllers</emphasis>: Action Controller can be protected declarativelly in the <emphasis>controller-definitions</emphasis> configuration section.<br/>
      Note that the {@link __IActionController} extends the {@link __ISystemResource}, so if you define action controllers by implementing the {@link __IActionController} you should need to also implement the {@link __ISystemResource} or extends the {@link __SystemResource}.<br/>
      If you extend the {@link __ActionController} you don't have to care on that because this class already extends the {@link __SystemResource}.</listitem>
      <listitem><emphasis>Model Services</emphasis>: You can protect any model service since the class used to call to the model, {@link __ModelService} extends the {@link __SystemResource}. You can also protect model services declarativelly in the <emphasis>model-services</emphasis> configuration section.</listitem>
      <listitem><emphasis>Protected sections</emphasis>: The UI component {@link __ProtectedSectionComponent} is used to protect zones on a page since it extends the {@link __SystemResource}.</listitem>
    </itemizedlist>
   </para>
   <refsect2 id="{@id systemresources_controllers}">
     <title>Protecting Action Controllers</title>
     <para>We can assign a permission to each action controller declarativelly by ussing the permission tag within the controller definition.</para>
     <para>i.e.
     {@example Security/Authorization/controller_definitions1.xml}
     In this example, we are protecting the AdminForumController with the ADMIN_POSTS permission. So, just users with that permission could execute actions within this controller.
     </para>
     <para>Note that protecting action controllers is similar to protect pages, since the client request for actions, nor pages.</para>
   </refsect2>
   <refsect2 id="{@id systemresources_modelservices}">
     <title>Protecting Model Services</title>
     <para>We can assign a permission to each model service declarativelly by ussing the permission tag within the model All {@link __View} derived classes are protected by the RBAC because the {@link __View} class is a child class of the {@link __SystemResource}.</para>
     <para>i.e.
     {@example Security/Authorization/model_services1.xml}
     In this example, we are protecting the service getPosts with the READ_POSTS permission while we are protecting the service createPost with the WRITE_POSTS permission. So, a call to the model service createPost is allowed just if the user in session has the permission WRITE_POSTS, it is, if the user has a role that contains that permission.</para>
     <para>Protecting model services becomes interesting when we have to expose some of them, i.e. by webservices.</para>
   </refsect2>
   <refsect2 id="{@id systemresources_protectedsection}">
     <title>Protecting page zones</title>
     <para>We can protect zones within a page by ussing the <emphasis>protected section component</emphasis>.</para>
     <para>This component is used as a tag (protectedsection component tag) in a template, protecting the area closed between the begin and the end tag.</para>
     <para>i.e.
     {@example Security/Authorization/protectedsectiontemplate.tpl}
     In this example, we have put a protectedsection component that requires the READ_PROTECTED_CONTENT permission.<br/>
     It means that users without this permission couldn't see the content protected.
     </para>
   </refsect2>
 </refsect1>
</refentry>

